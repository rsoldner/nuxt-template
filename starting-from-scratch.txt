

# Create a directory for the nuxt-template project with a src dir

# cd to nuxt-template dir

# Use a docker run command to install and create the project
docker run \
    -it --rm \
    --name nuxt-template-build \
    -v ${PWD}/src:/src \
    --network=bridge \
    -e HOST=0.0.0.0 \
    -p 8080:3000
    --entrypoint bash \
    node:current

# Run the following commands in the container:
npm install -g create-nuxt-app
npx create-nuxt-app .

# Answers used to the create-nuxt-app prompts:
create-nuxt-app v3.2.0
âœ¨  Generating Nuxt.js project in .
? Project name: nuxt-template
? Programming language: JavaScript
? Package manager: Npm
? UI framework: None
? Nuxt.js modules: (Press <space> to select, <a> to toggle all, <i> to invert selection)
? Linting tools: (Press <space> to select, <a> to toggle all, <i> to invert selection)
? Testing framework: Jest
? Rendering mode: Universal (SSR / SSG)
? Deployment target: Server (Node.js hosting)
? Development tools: (Press <space> to select, <a> to toggle all, <i> to invert selection)

# At this point, should be ready to test the install from your browser:
# NOTE: the output from node will say listening on "172.17.0.2:3000". This is in the container, so the access from the host port 8080 must be used since that was our port mapping in the docker run command.
    http://localhost:8080/


# Now that this directory is created, the npm install/create-nuxt-app commands do not need re-executed, as all the code lives within the directory.
# Next step is to create a dockerfile that will add the files to the container so that a full volume map is not required
# Run the following from the nuxt-template/ root

  touch npmrc
  docker build -t nuxt-template:dev .

  docker run -it --rm --name nuxt-template-no-vol-map -p 8080:3000 nuxt-template:dev

# We now have a fully containerized nuxt template application
# Extending this app can be done by volume mapping the specific directories in /src, or by writing a new dockerfile for your project to overwrite those directories.
